@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
    ViewData["Title"] = "Registrar";
    Layout = "~/Views/Shared/NoLayout.cshtml";
    double avg = 0, count = 0;
}
@using Basecode.Data.ViewModels
@model StudentDetailsWithGrade
<link rel="stylesheet" href="/css/TableInfo.css" />
<div class="wrapper">
    @await Html.PartialAsync("./_RegistrarSideBar")
    <div class="main p-5">
          <div class="row">
            <div class="col-lg-4">
                <div class="card mb-4">
                    <div class="card-body text-center">
                        <img src="https://mdbcdn.b-cdn.net/img/Photos/new-templates/bootstrap-chat/ava3.webp" alt="avatar"
                             class="rounded-circle img-fluid" style="width: 150px;">
                        <h5 class="my-3">@Model.Student.FirstName @Model.Student.MiddleName @Model.Student.LastName</h5>
                        <p class="text-muted mb-1">@Model.Student.Status</p>
                        <p class="text-muted mb-4">Grade @Model.Student.Grade</p>
                        <p class="text-muted mb-4">@Model.Student.age years old</p>
                        @if (Model.Student.lrn == null)
                        {
                            <p class="text-muted mb-4">
                                LRN  not set.
                            </p>
                        }
                        else
                        {
                            <p class="text-muted mb-4">
                                @Model.Student.lrn
                            </p>
                        }

                        <div class="d-flex justify-content-center mb-2">
                            <button type="button" class="btn btn-danger">Form-138</button>
                            <button type="button" class="btn btn-outline-danger ms-1">Report Card</button>
                        </div>
                    </div>
                </div>
              </div>
            <div class="col-lg-8 grid-margin stretch-card">
                <div class="tab">
                    <button class="tablinks" onclick="tabs(event, 'Grades')" id="defaultOpen">Grades</button>
                    <button class="tablinks" onclick="tabs(event, 'Values')">Values</button>
                </div>

                <div id="Grades" class="tabcontent">
                    <h3>Grades</h3>
                    <div class="card">
                        <div class="card-body">
                            <h4 class="card-title">Grades</h4>
                            <div class="btn-group">
                                <button type="button" class="btn btn-danger dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                                    School Year
                                </button>
                                <ul class="dropdown-menu">
                                    @foreach(var schoolyear in Model.School_Years)
                                    {
                                        <li><a class="dropdown-item" asp-action="StudentInfo" asp-route-student_Id="@Model.Student.Student_ID" asp-route-school_year="@schoolyear">@schoolyear</a></li>
                                    }                                    
                                    
                                </ul>
                            </div>
                            <div class="table-responsive">
                                <table class="table">
                                    <thead>
                                        <tr>
                                            <th>Subject</th>
                                            <th>1</th>
                                            <th>2</th>
                                            <th>3</th>
                                            <th>4</th>
                                            <th>5</th>
                                            <th>Remarks</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach(var group in Model.grades)
                                        {                                            
                                            count++;
                                            <tr>
                                                <td>@group.SubjectName</td>
                                                @for(int x=0; x< group.Grades.Count();x++)
                                                {
                                                    <td>@group.Grades.ElementAt(x).Grade</td>
                                                    if (x == 4 && group.Grades.ElementAt(x).Grade >= 75)
                                                    {
                                                        avg += group.Grades.ElementAt(x).Grade;
                                                        <td>Passed</td>
                                                    }
                                                    else if (x == 4 && group.Grades.ElementAt(x).Grade < 75)
                                                    {
                                                        avg += group.Grades.ElementAt(x).Grade;
                                                        <td>Failed</td>
                                                    }
                                                }
                                                @for (int x = 0; x < (4 - group.Grades.Count());x++)
                                                {
                                                    <td></td>
                                                }
                                                
                                            </tr>
                                        }                                                                        
                                    </tbody>
                                </table>
                                <p class="lead">General Average: @Math.Floor(avg / count)</p>
                                @if (Math.Floor(avg / count) >= 75)
                                {
                                    <p class="lead">Promoted</p>
                                }
                            </div>                           
                        </div>
                    </div>
                </div>

                <div id="Values" class="tabcontent">
                    <h3>Values</h3>
                    <div class="card">
                        <div class="card-body">
                            <h4 class="card-title">Values Record</h4>
                            <p class="card-description">
                                Basic table with card
                            </p>
                            <div class="table-responsive">
                                <table class="table">
                                    <thead>
                                    </thead>
                                    <tbody>
                                    <thead>
                                        <tr>
                                            <th>Core Values</th>
                                            <th>Behavioral Statement</th>
                                            <th>1</th>
                                            <th>2</th>
                                            <th>3</th>
                                            <th>4</th>
                                            <th>Final</th>
                                        </tr>
                                    </thead>
                                        @foreach (var corevalues in Model.learnersValues)
                                        {
                                            var grades = Model.valuesGrades.Where(p => p.BehaviouralId == corevalues.behavioural_Statements.ElementAt(0).Id);
                                        <tr>
                                            <th rowspan="@corevalues.behavioural_Statements.Count()">
                                                    @corevalues.Core_Values
                                            </th>
                                            <td>
                                                    @corevalues.behavioural_Statements.ElementAt(0).Statements
                                                <a href="" data-bs-toggle="modal" data-bs-target="#exampleModal" onclick="setBehavioural('@corevalues.behavioural_Statements.ElementAt(0).Id')"><i class="lni lni-plus"></i></a>
                                            </td>
                                                @foreach (var grade in grades)
                                                {
                                                   
                                                <td>
                                                        @grade.Grade <a href="" data-bs-toggle="modal" data-bs-target="#exampleModal1" onclick="updateGrade('@grade.Grade','@grade.Id')"><i class="lni lni-pencil"></i></a>
                                                </td>
                                                }
                                        </tr>
                                            @for (int x = 1; x < @corevalues.behavioural_Statements.Count(); x++)
                                            {
                                                var gradesi = Model.valuesGrades.Where(p => p.BehaviouralId == corevalues.behavioural_Statements.ElementAt(x).Id);

                                            <tr>
                                                <td>
                                                        @corevalues.behavioural_Statements.ElementAt(x).Statements <a href="" data-bs-toggle="modal" data-bs-target="#exampleModal" onclick="setBehavioural('@corevalues.behavioural_Statements.ElementAt(x).Id')"><i class="lni lni-plus"></i></a>
                                                </td>
                                                    @for (int y = 0; y < gradesi.Count(); y++)
                                                    {
                                                    <td>
                                                            @gradesi.ElementAt(y).Grade <a href="" data-bs-toggle="modal" data-bs-target="#exampleModal1" onclick="updateGrade('@gradesi.ElementAt(y).Grade','@gradesi.ElementAt(y).Id')">
                                                            <i class="lni lni-pencil">
                                                            </i>

                                                        </a>
                                                    </td>
                                                    }
                                            </tr>
                                            }
                                        }
                                    </tbody>
                                </table>
                            </div>                          
                        </div>
                    </div>
                </div>

          </div>
    </div>
        <script src="/js/Tables.js"></script>
</div>
</div>